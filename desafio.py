# -*- coding: utf-8 -*-
"""desafio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UImNUaI7etJ2WR9oMf_90wfRiPBAv-sx

# Dataset: California Housing Prices

O desafio consiste em predizer o preço da habitação a partir de informações do senso de California de 1990.

As colunas do dataset são as seguintes:
- **longitude**: Longitude geográfica.
- **latitude**: Latitude geográfica.
- **housing_median_age**: Idade média das habitações na região, medida em anos.
- **total_rooms**: Número total de cômodos em todas as unidades habitacionais da área analisada.
- **total_bedrooms**: Número total de quartos em todas as unidades habitacionais da área analisada.
- **population**: População total residente na área geográfica correspondente ao imóvel.
- **households**: Número total de domicílios na região, representando unidades familiares ou habitacionais.
- **median_income**: Renda mediana dos moradores da região, expressa em múltiplos de 1.000 dólares.
- **median_house_value**: Valor mediano das residências na área, representado em dólares.
- **ocean_proximity**: Proximidade da localização em relação ao oceano, categorizada por rótulos como "Perto da Baía" (Near Bay), "Perto do Oceano" (Near Ocean), "Interior" (Inland), entre outros.

O candidato deve apresentar um modelo que faça a predição do preço da habitação (o candidato é livre para entregar mais de um modelo).

Esse arquivo é um template para desenvolver o modelo, sinta-se a vontade para modificá-lo como preferir.
"""

import pandas as pd
import numpy as np
import random
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import seaborn as sns
import matplotlib.pyplot as plt
import tensorflow as tf
import torch

"""# Para reprodutibilidade use uma seed específica para gerar números aleatórios
Abaixo algumas formas de definir a seed aleatória de alguns frameworks populares, caso não vá usar algum sinta-se a vontade para excluir
"""

random_seed = 42
np.random.seed(random_seed)
random.seed(random_seed)
torch.manual_seed(random_seed)
tf.random.set_seed(random_seed)

data = pd.read_csv('housing.csv')

"""Exibe as primeiras linhas"""

data.head()

data.describe()

"""Verificar os valores ausentes"""

data.isnull().sum()

"""Visualização da distribuição da variável target

"""

sns.histplot(data['median_house_value'], bins=50, kde=True)
plt.title('Distribuição dos preços das casas')
plt.show()

print(data.columns)

def data_preprocessing(data):
    data["total_bedrooms"] = data["total_bedrooms"].fillna(data["total_bedrooms"].mean())
     # Criando novas features
    data["rooms_per_household"] = data["total_rooms"] / data["households"]
    data["bedrooms_per_room"] = data["total_bedrooms"] / data["total_rooms"]
    data["population_per_household"] = data["population"] / data["households"]

    data = pd.get_dummies(data, columns=["ocean_proximity"], drop_first=True)
    scaler = StandardScaler()
    data = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)
    return data

data = data_preprocessing(data)
data

data.columns

data.head()

data.corr()["median_house_value"].sort_values(ascending=False)

"""Mapa de calor de correlação"""

plt.figure(figsize=(12, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Mapa de Correlação das Variáveis')
plt.show()

pass

"""# Pré-processamento

# Separar os dados em treino, validação e teste
"""

from sklearn.model_selection import train_test_split
X = data.drop(columns="median_house_value")
y = data["median_house_value"]
X_train, X_other, y_train, y_other = train_test_split(X, y, test_size=0.2, random_state=random_seed)
X_val, X_test, y_val, y_test = train_test_split(X_other, y_other, test_size=0.5, random_state=random_seed)

# Criar e treinar o modelo Random Forest
modelo = RandomForestRegressor(n_estimators=100, random_state=random_seed)
modelo.fit(X_train, y_train)

# Fazer previsões
y_pred = modelo.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f'MSE: {mse:.2f}')
print(f'RMSE: {rmse:.2f}')
print(f'R²: {r2:.4f}')

plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.5)
plt.xlabel("Valores Reais")
plt.ylabel("Previsões")
plt.title("Previsões vs Valores Reais")
plt.show()

"""# Exemplo de estrutura para utilização com o PyTorch
não é obrigatória a utilização do PyTorch. Implementação do modelo pode ser feita com qualquer biblioteca/framework de sua escolha.
"""

import torch.nn as nn
import torch.nn.functional as F

class Modelo(nn.Module):
    def __init__(self, input_dim):
        super(Modelo, self).__init__()
        self.fc1 = nn.Linear(input_dim, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 1)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.fc3(x)
        return x